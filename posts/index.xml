<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Dhruva Srinivas</title>
    <link>https://carrotfarmer.github.io/posts/</link>
    <description>Recent content in Posts on Dhruva Srinivas</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Dhruva Srinivas 2021</copyright>
    <lastBuildDate>Tue, 11 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://carrotfarmer.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Fibonacci Sequence</title>
      <link>https://carrotfarmer.github.io/posts/fibonacci_sequence/</link>
      <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://carrotfarmer.github.io/posts/fibonacci_sequence/</guid>
      <description>Generating a Fibonacci sequence is an extremely popular programming question, which might seem intimidating at first but it&amp;rsquo;s actually quite simple.
For those of you boomers who don&amp;rsquo;t know what a Fibonacci sequence is:
 In mathematics, the Fibonacci numbers, commonly denoted Fₙ, form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is, and for n &amp;gt; 1.</description>
      <content>&lt;p&gt;Generating a Fibonacci sequence is an extremely popular programming question, which might seem intimidating at first but it&amp;rsquo;s actually quite simple.&lt;/p&gt;
&lt;p&gt;For those of you boomers who don&amp;rsquo;t know what a Fibonacci sequence is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In mathematics, the Fibonacci numbers, commonly denoted Fₙ, form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is, and for n &amp;gt; 1.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Fibonacci_number&#34;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So what we&amp;rsquo;re gonna do is programmatically generate an N length of Fibonacci numbers.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Enter the Fibonacci length: 8
[0, 1, 1, 2, 3, 5, 8, 13]
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;visualizing-a-way-to-solve-the-problem&#34;&gt;Visualizing a way to solve the problem&lt;/h1&gt;
&lt;p&gt;A good approach to solving these questions would be to break &amp;lsquo;em up into little tidbits and understanding the problem and then implement that in code. Here, these are the steps&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get user input for the length of the Fibonacci sequence.&lt;/li&gt;
&lt;li&gt;Set initial values of the sequence. (This is always 0 and 1)&lt;/li&gt;
&lt;li&gt;Create a loop and check if the length of the sequence is equal to the number the user has specified. If it is, then exit the loop. If it isn&amp;rsquo;t generate the Fibonacci number and append that to the list of already generated Fibonacci numbers.&lt;/li&gt;
&lt;li&gt;And finally, print the Fibonacci sequence.
But, how in the world do you generate the Fibonacci number??&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So if you noticed, Fibonacci numbers are basically the sum of the previous two numbers in the sequence. And if you didn&amp;rsquo;t, well that just sucks. Anyway, what we basically wanna do is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Access the last two elements of the sequence/list&lt;/li&gt;
&lt;li&gt;Add &amp;lsquo;em up&lt;/li&gt;
&lt;li&gt;Append them to the sequence/list&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;WOAH, so that&amp;rsquo;s it? Yup.
Let&amp;rsquo;s get started coding!&lt;/p&gt;
&lt;h1 id=&#34;solving-the-problem&#34;&gt;Solving the problem&lt;/h1&gt;
&lt;p&gt;So, I&amp;rsquo;m gonna do this in Python, you can choose whatever language you want, the concept is dead simple and you should be able to implement this in any language.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, we wanna get the user input, so that&amp;rsquo;s nice &amp;amp; straightforward.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# inp is short for input&lt;/span&gt;
inp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter the length of the Fibonacci sequence: &amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Now we&amp;rsquo;ll create a function that generates the Fibonacci sequence:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;inp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter the length of the Fibonacci sequence: &amp;#34;&lt;/span&gt;))

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(fibonacci_length):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;We can create a list and populate it with the default values of a Fibonacci sequence:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;inp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter the length of the Fibonacci sequence: &amp;#34;&lt;/span&gt;))

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(fibonacci_length):
    fibonacci_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Now, we&amp;rsquo;re gonna create a &lt;code&gt;while&lt;/code&gt; loop which checks if the Fibonacci length is equal to the length of the list &lt;code&gt;fibonacci_list&lt;/code&gt; or not.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;inp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter the length of the Fibonacci sequence: &amp;#34;&lt;/span&gt;))

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(fibonacci_length):
    fibonacci_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(fibonacci_list) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; fibonacci_length:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;We&amp;rsquo;re now going to access the last two values of &lt;code&gt;fibonacci_list&lt;/code&gt; by grabbing their indexes:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;inp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter the length of the Fibonacci sequence: &amp;#34;&lt;/span&gt;))

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(fibonacci_length):
    fibonacci_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(fibonacci_list) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; fibonacci_length:
        second_last_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(fibonacci_list) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        last_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(fibonacci_list) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Now we can append the sum of the last two values of the list to &lt;code&gt;fibonacci_list&lt;/code&gt; and print the whole list:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;inp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter the length of the Fibonacci sequence: &amp;#34;&lt;/span&gt;))

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(fibonacci_length):
    fibonacci_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(fibonacci_list) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; fibonacci_length:
        second_last_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(fibonacci_list) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        last_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(fibonacci_list) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        fibonacci_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(fibonacci_list[second_last_index] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; fibonacci_list[last_index])
    print(fibonacci_list)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;And finally, we&amp;rsquo;re gonna call the &lt;code&gt;fib&lt;/code&gt; function and pass the user input (&lt;code&gt;inp&lt;/code&gt;) variable to the &lt;code&gt;fibonacci_length&lt;/code&gt; parameter:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;inp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter the length of the Fibonacci sequence: &amp;#34;&lt;/span&gt;))

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(fibonacci_length):
    fibonacci_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(fibonacci_list) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; fibonacci_length:
        second_last_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(fibonacci_list) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        last_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(fibonacci_list) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        fibonacci_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(fibonacci_list[second_last_index] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; fibonacci_list[last_index])
    print(fibonacci_list)

fib(inp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;edit&#34;&gt;Edit&lt;/h1&gt;
&lt;p&gt;Suggested by &lt;a href=&#34;https://dev.to/robinloche&#34;&gt;@robin-loche&lt;/a&gt;, this code can be shortened by making the following changes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;inp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter the length of the Fibonacci sequence: &amp;#34;&lt;/span&gt;))

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(fibonacci_length):
    fibonacci_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(fibonacci_list) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; fibonacci_length:
        fibonacci_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(fibonacci_list[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; fibonacci_list[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
    print(fibonacci_list)

fib(inp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can use negative indexing in Python to access the elements of the array from the last position. What I mean is&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# In this array,&lt;/span&gt;
[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apple&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lenovo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;asus&amp;#34;&lt;/span&gt;]
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;asus&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; has the index of [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This greatly reduces the amount code in the loop and I suggest you all to do it this way.&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s all there is to it!
If you have coded this in a different programming language please share it down below :)
Thanks for reading, I&amp;rsquo;ll catch you guys in my next post!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Email Automation w/ Python</title>
      <link>https://carrotfarmer.github.io/posts/email_automation_with_python/</link>
      <pubDate>Wed, 23 Sep 2020 05:20:41 +0000</pubDate>
      
      <guid>https://carrotfarmer.github.io/posts/email_automation_with_python/</guid>
      <description>Hi! In this post I&amp;rsquo;m gonna show you guys how to send emails using Python! In this post I&amp;rsquo;m using Gmail, so make sure you&amp;rsquo;ve set up a Google account to follow through this tutorial.
This post is based on a tutorial I made on YouTube
Creating a bot email account First, we&amp;rsquo;ll have to create a new bot account through which our bot can send the email and I recommend you to not use your personal account for this.</description>
      <content>&lt;p&gt;Hi! In this post I&amp;rsquo;m gonna show you guys how to send emails using Python! In this post I&amp;rsquo;m using &lt;a href=&#34;https://mail.google.com&#34;&gt;Gmail&lt;/a&gt;, so make sure you&amp;rsquo;ve set up a Google account to follow through this tutorial.&lt;/p&gt;
&lt;p&gt;This post is based on a tutorial I made on &lt;a href=&#34;https://www.youtube.com/watch?v=l_4ZzS24g0I&#34;&gt;YouTube&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;creating-a-bot-email-account&#34;&gt;Creating a bot email account&lt;/h1&gt;
&lt;p&gt;First, we&amp;rsquo;ll have to create a new bot account through which our bot can send the email and I recommend you to not use your personal account for this. Creating a new Google account is pretty straight-forward so I&amp;rsquo;m not gonna go over that. Before we proceed though, we need to enable a setting in our Google account to make this whole thing work.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Log into your bot account&lt;/li&gt;
&lt;li&gt;Turn on &lt;a href=&#34;https://myaccount.google.com/lesssecureapps&#34;&gt;Less secure app access&lt;/a&gt;&lt;br&gt;
We do this because the Python module which we&amp;rsquo;re gonna use to send the email is not verified, and Google won&amp;rsquo;t let such apps access you&amp;rsquo;re Google account.
Now we&amp;rsquo;re all set for coding!&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;the-modules-we-need&#34;&gt;The Modules we need&lt;/h1&gt;
&lt;p&gt;There are some modules we can use to help us achieve our goal. All of these modules are built-in with your Python installation and you don&amp;rsquo;t need to install anything separately with &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;smtplib&lt;/code&gt;&lt;/strong&gt;: smtplib allows us to connect to &lt;strong&gt;SMTP&lt;/strong&gt; (Simple Mail Transfer Protocol) servers. Email providers like Gmail, Outlook and Yahoo uses SMTP.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;email&lt;/code&gt;&lt;/strong&gt;: This module contains a class called &lt;code&gt;EmailMessage&lt;/code&gt; which will help us compose our email by configuring the subject, body etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;composing-the-email&#34;&gt;Composing the email&lt;/h1&gt;
&lt;p&gt;First let&amp;rsquo;s import all the stuff mentioned in the previous section.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; smtplib
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; email.message &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; EmailMessage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we&amp;rsquo;re gonna instantiate the EmailMessage class and create the structure of our email.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EmailMessage()

email[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;from&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Email Bot&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Name of the sender&lt;/span&gt;
email[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;to&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;youraccount@gmail.com&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Email address of the receiver&lt;/span&gt;
email[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Automated Message sent with Python&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Subject of the email&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Body of the email&lt;/span&gt;
email&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_content(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This is an automated email sent using Python!&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;sending-the-email&#34;&gt;Sending the email&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# If you&amp;#39;re using outlook replace the host with smtp.outlook.com&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# The port 587 is the de-facto for emails&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; smptlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SMTP(host&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;smtp.gmail.com&amp;#34;&lt;/span&gt;, port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;587&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; smtp:
    smtp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ehlo() &lt;span style=&#34;color:#75715e&#34;&gt;# ehlo (Extended HELO) is a command sent by an email server to identify itself when connecting to another email server to start the process of sending an email. &lt;/span&gt;
    smtp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;starttls() &lt;span style=&#34;color:#75715e&#34;&gt;# TLS (Transport Layer Security) encrypts data sent over the Internet for security &lt;/span&gt;
    smtp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;login(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ebot1042@gmail.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# Use your bot&amp;#39;s email credentials to login&lt;/span&gt;
    smtp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send_message(email) &lt;span style=&#34;color:#75715e&#34;&gt;# This finally sends our email using our email variable as the message&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;final-code&#34;&gt;Final Code&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; smtplib
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; email.message &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; EmailMessage

email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EmailMessage()

email[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;from&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Name of sender\s account&amp;#39;&lt;/span&gt;
email[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;to&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;receiver@email.com&amp;#39;&lt;/span&gt;
email[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Automated Message sent with Python&amp;#39;&lt;/span&gt;

email&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_content(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;This is an automated email sent using python!!&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; smtplib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SMTP(host&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;smtp.gmail.com&amp;#34;&lt;/span&gt;, port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;587&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; smtp:
	smtp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ehlo()
	smtp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;starttls()
	smtp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;login(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sender@gmail.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;senderspassword&amp;#39;&lt;/span&gt;)
	smtp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send_message(email)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;adding-attachments&#34;&gt;Adding attachments&lt;/h1&gt;
&lt;p&gt;We can also add attachments to our e-mails with an extra line of code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;email&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_attachment(open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;attachment.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(), filename&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;attachment.txt&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we are opening our attached file in &lt;strong&gt;read&lt;/strong&gt; mode because we&amp;rsquo;re not making any changes to its contents. And the filename is set to our attachment file&amp;rsquo;s name. That&amp;rsquo;s basically it!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: You &lt;strong&gt;have&lt;/strong&gt; to set the content of the email &lt;strong&gt;before&lt;/strong&gt; adding the file attachment code!&lt;/p&gt;
&lt;p&gt;Thanks for reading, I&amp;rsquo;ll catch you guys in my next post!&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
